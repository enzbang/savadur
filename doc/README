
			    Savadur Quick Start
                            -------------------

Savadur is a light build bot for triggering a build when commits are
done and to scheduling periodical builds.

It's a client-server based application. The normal way to use it is to
have a server that deliver orders to build-slave clients. But having only
one client is also supported. In client-server mode all XML configuration
files are automatically deployed from the server to the clients.

It's SCM agnostic. Savadur does not know anything about Subversion,
CVS or Git. But it is very easy to teach him how to interact with a new
SCM.

Configuration
-------------

Adding support for git is simple as adding a file scm/git.xml in the server
savadur directory. Note that the specific action named "init" is mandatory
and is expected to retreive the sources from the given SCM. If present the
version action must return a single id representing the current HEAD
revision number.

   $ cat scm/git.xml

   <scm>
     <name id="git" />
     <filter id="files_updated" regexp=" ([^\n]*) *\|  "/>

     <action id="init">
       <cmd>git-clone $url $sources</cmd>
     </action>

     <action id="pull">
       <cmd filter1="files_updated">git-pull</cmd>
     </action>

     <action id="version" result="value">
       <cmd regexp="^([^\t]*)">git-ls-remote origin refs/heads/master</cmd>
     </action>
   </scm>

For example, if you want to use Savadur to build Savadur itself with only one
default scenario : run every day on two clients (turbo and enzbang)
and compile if there are some new commits. You'll need to:

- Create a server savadur directory :

$ ls savadurdir/server
config  htdocs  logs.db  projects  scm  scripts

First thing to do is to create the database:

   $ ./scripts/create_database.sh

Where config contains a file named project_list.xml

   $ cat config/project_list.xml

   <project_list>
      <project id="savadur" log_size="10">
         <scenario id="default">
            <client key="enzbang"/>
            <client key="turbo"/>
         </scenario>
      </project>
   </project_list>

   The project list must have an entry for every scenario. It associate one
   or many nodes for each scenario. Here the "default" scenatio will run on
   "enzbang" and "turbo" machines.

   Only the 10 last actions will be shown. The default is 100.

savadurdir/server/htdocs
	contains some css and templates for webpages

savadurdir/server/logs.db
	is the database where ALL logs and built status are collected

savadurdir/server/scm/
	contains all SCM description. Here savadur use git.

savadurdir/server/projects
	contains all project descriptions.

The project file savadur.xml:

   <project>
     <name id="savadur" />
     <scm id="git" />

     <variable id="url"
        value="http://repo.or.cz/r/savadur.git" />

     <action id="make">
       <cmd>make setup all</cmd>
     </action>

     <action id="regtests">
       <cmd>make regtests</cmd>
     </action>

     <scenario id="default">
       <scm_action id="version" status="require_change" on_error="quit" />
       <scm_action id="pull" />
       <action id="make" />
       <action id="regtests" />
     </scenario>

     <scenario id="check" periodic="03:00/+60">
       <scm_action id="version" status="require_change" on_error="quit" />
       <scm_action id="pull" />
       <action id="make" />
       <action id="regtests" />
     </scenario>

     <scenario id="try_patch" patch_file="true" use_tmp="true">
       <scm_action id="pull" />
       <scm_action id="apply" />
       <action id="make" />
     </scenario>
   </project>

This project file describes:

 - The project name "savadur",

 - The scm type "git", all scm_action will reference actions in the
   SCM xml file (here savadurdir/server/scm/git.xml),

-  The repository URL (referenced into the SCM as $url),

 - The action list. For this small project only two actions : make and
   regtests,

 - The scenario list. We have defined three scenarios:

       * The "default" scenario, referencing four actions. The
         scm_action "version" is a special action that requires
         changes (we want to compile only if there is a new commit)
         and quit the build process if no change.

       * The "check" scenario which is run at 03:00 and every 60 minutes.

       * The "try_patch" scenario using a temporary directory and
         applying the patch file uploaded by the developer.

Now if we have a server running on my_server_machine.my_company.com
and we'll want to add the two clients turbo (machine turbo_server) and
enzbang (machine enzbang_server) do:

   turbo_server$  ./savadur --client --config --id turbo

   turbo_server$  ./savadur --client --remote \
                        --add my_server_machine \
                        http://my_server_machine.my_company.com

   enzbang_server$ ./savadur --client --config --id enzbang

   enzbang_server$ ./savadur --client --remote \
                        --add the_server \
                        http://my_server_machine.my_company.com

Note that the server name does not has to be equal. It's only a client
side reference.

Now you just have to launch the server:

   $ ./savadur --server

And start the two clients:

   turbo_server$ ./savadur --client

   enzbang_server$ ./savadur --client

And you're done!

Trigger a build
---------------

To trigger a build it is possible to send a simple HTTP request to the server
for a specific project and scenario.

   $ wget --no-proxy \
     	  http://<server>:<port>/run?p=<project>\&s=<scenario>\&l=<latency>

     <project>  : the project name
     <scenario> : the specific scenario to run
     <latency>  : seconds to wait before launching the run

Following the example above:

   $ wget --no-proxy \
     http://my_server_machine.my_company.com:8181/run?p=savadur\&s=default

Notifications
-------------

XMPP and SMTP notifications can be activated on the server side using an
XML document named notify.xml.

For XMPP:

<notifications>
   <jabber>
     <server value="jabber.org" />
     <jid value="savadur-bot" />
     <password value="savadur_pwd" />
   </jabber>
   <smtp>
      <server value="smtp.example.com"/>
      <sender value="savadur"/>
      <user value="savadur@here.com"/>
      <password value="secret_smtp_pwd"/>
   </smtp>
</notifications>

For SMTP, user and password are optional.

For now only PLAIN authentication is supported for SMTP.

Committers e-mail
-----------------

In some case there is no direct association between the committer name and
the commiter e-mail. In Subversion using HTTP protocole, for example, the
committer e-mail cannot be determined from the name found in the log.

To work around this problem an XML file containing the proper associations
can be placed on the server side.

   <committers>
     <set name="obry" value="pascal@obry.net"/>
     <set name="ramonat" value="olivier@ramonat.fr"/>
     <set name="*" value="@mydomain.com"/>
   </committers>

The last association is a catch-all one. For all name not listed the specified
domain is appended to form the e-mail.
